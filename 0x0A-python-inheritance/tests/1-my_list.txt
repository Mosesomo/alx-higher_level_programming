#1-my_list.txt


Test for 1-My_list.py
=======================


This module defines a class ``MyList``  that inherits from a ``list``.


::


	>>> MyList = __import__('1-my_list').MyList

Handling common cases

::


	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 2, 3, 4, 5]

Handling not defined object

::


	>>> my_list1.print_sorted()
	Traceback (most recent call last):
	NameError: name 'my_list1' is not defined

Passing a list

::


	>>> a_list = [2, 5, 4, 6]
	>>> my_list = MyList(a_list)
	>>> my_list.print_sorted()
	[2, 4, 5, 6]

Passing an empty list

::


	>>> a_list = []
	>>> my_list = MyList(a_list)
	>>> my_list.print_sorted()
	[]

passing same number in a list

::


	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(1)
	>>> my_list.append(1)
	>>> my_list.append(1)
	>>> my_list.print_sorted()
	[1, 1, 1, 1]

paSSing list list in the parent

::

	>>> my_list = [1, 2, 3]
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	AttributeError: 'list' object has no attribute 'print_sorted'

Handling negative numbers

::


	>>> my_list = MyList()
	>>> my_list.append(3)
	>>> my_list.append(1)
	>>> my_list.append(-2)
	>>> my_list.append(7)
	>>> my_list.append(-5)
	>>> my_list.print_sorted()
	[-5, -2, 1, 3, 7]

Handling float numbers

::


	>>> my_list = MyList()
	>>> my_list.append(3.7)
        >>> my_list.append(3.1)
        >>> my_list.append(1.2)
        >>> my_list.append(7.2)
        >>> my_list.append(2.5)
        >>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: must have integers

